import Head from 'next/head'
import React from "react";
import Link from 'next/link'
import { Amplify, withSSRContext } from 'aws-amplify';
import Image from 'next/image'
import admin from '../public/admin.png' 
import Map from './map/index';
import EventsSearch from '../src/components/filterEventSearch/filterEventSearch';
import Ilustration from './../src/components/Ilustracion/Ilustracion';
import { ModelEventFilterInput } from '../src/API';
import { listEvents } from '../src/graphql/queries';
import awsExports from '../src/aws-exports';
import { Event } from '../src/models';
import {  useRouter } from 'next/router';
import ScrollEvent from '../src/components/scrollEvent';


Amplify.configure({ ...awsExports, ssr: true });

interface IHome {
  signOut: ()=> void
  scrollEvents: Array<Event>
  user: Record<string, any>
  renderedAt: string;
  events: Array<Event>
  filters: IFilters
}

export interface IFilters {
  startDate: string,
 types: string
 
}
// Interface IHome {
//   user: TUser
//   }
  
//   Type TUser = {
//   userName: string 
//   }
export async function getServerSideProps({ req, query }: any) {
  const SSR = withSSRContext({ req });
  const startDate = new Date(query.startDate);
  const types = query.types;
  const filterOptions = {
    ...(query.types && {types: {contains: types}}),
    ...(query.startDate && {startDate: {gt: startDate.toISOString()}}),
  }
    const today = new Date().toISOString(); 
    console.log(today)
   const filter: ModelEventFilterInput = {
     and: [
       {...filterOptions}
     ]
   }
   const dateFilter: ModelEventFilterInput = {
    and: [
      {startDate: {gt: today}}
    //   trae eventos apartir de ahora
    ]
  }

  try {
     const response = await SSR.API.graphql({ query: listEvents, variables: {filter: dateFilter}});
     const responseFilter = await SSR.API.graphql({ query: listEvents, variables: {filter: filter} });
    //  COPIAR ESTO 2 VECES Y 1 MODIFICAR PARA Q NO SE ME CAMBIE
    return {
      props: {
        scrollEvents: response.data.listEvents.items,
        events: responseFilter.data.listEvents.items,
        filters: filterOptions
      },
    };
  } catch (err) {
    console.log(err);
    return {
      props: {},
    };
  }
  
}
function Home({events =[] ,scrollEvents=[],filters}: IHome) { 
  const router = useRouter();
  // Call this function whenever you want to
  // refresh props!
  const refreshData = ({startDate, types}: IFilters) => {
    router.push({pathname: '/', query: {startDate: startDate, types: types}});
  }

  const handleChange = (newFilters: IFilters) => {
    const prevFilters = router.query;
    refreshData(
      {
        ...(prevFilters as unknown as IFilters),
         ...newFilters
        })
  } 
  return (
    <div className='bg-gradient-to-t from-violet-700 to-gray-800  pt-40 flex items-center flex-col'>
        <Head>
          <title>Weeout</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>

        <nav className="bg-violet-800 p-2 mt-0 fixed w-full z-10 top-0">
          <div className="container mx-auto flex flex-wrap items-center">
		        <div className="flex w-full md:w-1/2 justify-center md:justify-start text-white font-extrabold">
				      <div className="text-white no-underline hover:text-white hover:no-underline">
					      <div className="flex text-2xl pl-2">
                  <div className="em em-grinning"></div>
                  Bienvenido a 
                  <div className='text-violet-500 mx-2'>Weeout</div> 
                  <Image className="w-5 h-5 rounded-full mx-2 my-1" src={admin} alt="Rounded avatar"/>
                </div>
				      </div>
            </div>
			      <div className="flex w-full pt-2 content-center justify-between md:w-1/2 md:justify-end">
				      <ul className="list-reset flex justify-between flex-1 md:flex-none items-center">
                <li className="mr-3">
                  <Link href='/aboutUs' className='inline-block text-black no-underline hover:text-gray-200 hover:text-underline py-2 px-4'>Mas sobre nosotros</Link>
                </li>
                <li className="mr-3">
                </li>
			      	</ul>
			      </div>
          </div>
        </nav>

        <h1 className=' xl:font-serif text-5xl text-white'>
          <span>Hola, comienza ahora <br/>a disfrutar de</span>
          <span className='text-violet-500 mx-2 '>Weeout</span>
        </h1>
        <Link className="bg-transparent hover:bg-violet-500 text-white font-semibold hover:text-black mt-10 py-2 px-4 border border-violet-500 hover:border-transparent rounded" href='/profile'>Comienza a disfrutar</Link>


        <section className="container mx-auto text-center  mb-12 ">
        <div className="text-xs xl:text-sm col-span-12 sm:col-span-7 lg:col-span-4 px-64  "><Ilustration/></div>  
        <ScrollEvent events={scrollEvents} />
             
        </section>  
        <div className="text-xl col-span-12 lg:col-span-7 mb-10"><Map events={events}/> </div>
        <h1 className="xl:font-serif text-3xl text-white">Busca lo que necesites en la Lista de eventos disponibles: </h1>

        <article className="grid gap-2">
          <main className="grid grid-cols-[1fr_minmax(0px,1280px)_1fr] gap-6 gap-y-8 ">
            <section className="grid grid-cols-3 col-start-2 gap-4 lg:gap-6 gap-y-8 content-start">
              

              <div className="col-span-12  object-cover lg:row-span-2 bg-gradient-to-t from-gray-900 to-violet-600 border rounded-lg text-white">
              <EventsSearch events={events}  filters={filters} updateFilters={handleChange} />
              </div>
            </section>
          </main>
        </article>
          
      {/* <div style={{ padding: 50 }}>
      <h1>Logged in as {user.username}.</h1>
      <div>
        <button onClick={signOut}>Sign out</button>
      </div>
      <div>This page was server-side rendered on {renderedAt}.</div>
    </div> */}
    </div>
  )
}

export default Home;